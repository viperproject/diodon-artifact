name: Artifact

# creates the artifact docker image and
# - verifies the Tamarin model
# - TODO

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Create Image ID
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_ID=ghcr.io/$REPO_OWNER/diodon-artifact" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Image version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "IMAGE_TAG=${{ env.IMAGE_ID }}:$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          file: docker/Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${{ github.run_id }}"
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/image.tar


  test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/image.tar

      # - name: Verify protocol model
      #  run: docker run --entrypoint "/bin/bash" ${{ env.IMAGE_TAG }} -c "cp -r model-orig/. model/; /gobra/verify-model.sh"


  publish:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 1
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/image.tar

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        uses: docker/build-push-action@v2
        with:
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${{ github.run_id }}"
          push: true


  cleanup:
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ env.IMAGE_TAG }}
          failOnError: false

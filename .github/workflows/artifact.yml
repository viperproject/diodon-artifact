name: Artifact

# creates the artifact docker image and
# - verifies the Tamarin model
# - TODO

on:
  push:

env:
  IMAGE_NAME: diodon-artifact-2
  IMAGE_WORKFLOW_ARTIFACT_NAME: diodon-artifact-image

jobs:
  Build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      IMAGE_TAG: ${{ steps.output_step.outputs.IMAGE_TAG }}
    steps:
      - name: Create Image ID
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_ID=ghcr.io/$REPO_OWNER/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Image version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "IMAGE_TAG=${{ env.IMAGE_ID }}:$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          file: docker/Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${{ github.run_id }}"
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_WORKFLOW_ARTIFACT_NAME }}
          path: /tmp/image.tar

      - name: Set job output
        id: output_step
        run: echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT


  test:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: Build
    strategy:
      # tests should not be stopped when they fail on one of the OSes:
      fail-fast: false
      matrix:
        name: ["Verify protocol model"]
        include:
          - name: "Verify protocol model"
            command: "/gobra/verify-model.sh"
    timeout-minutes: 15
    steps:
      - name: Print image tag
        run: echo ${{ needs.Build.outputs.IMAGE_TAG }}
      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ env.IMAGE_WORKFLOW_ARTIFACT_NAME }}
      #     path: /tmp

      # - name: Load image
      #   run: docker load --input /tmp/image.tar

      # - name: Verify protocol model
      #  run: docker run --entrypoint "/bin/bash" ${{ needs.Build.outputs.IMAGE_TAG }} -c "cp -r model-orig/. model/; ${{ matrix.command }}"


  Publish:
    runs-on: ubuntu-latest
    needs: [Build, test]
    timeout-minutes: 1
    # set GITHUB_TOKEN permissions such that pushing the Docker image will be possible:
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_WORKFLOW_ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/image.tar

      - name: Test image
        run: docker run --entrypoint "/bin/bash" ${{ needs.Build.outputs.IMAGE_TAG }} -c "echo 'Hello'"

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Print image tag
        run: echo ${{ needs.Build.outputs.IMAGE_TAG }}

      - name: Push image
        # here we have to use the IMAGE_TAG instead of the IMAGE_NAME!
        # run: docker push ${{ needs.Build.outputs.IMAGE_TAG }}
        run: |
          docker image ls
          REPO=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker push --all-tags ghcr.io/$REPO
      # - name: Push image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: docker/Dockerfile
      #     tags: ${{ needs.Build.outputs.IMAGE_TAG }}
      #     labels: "runnumber=${{ github.run_id }}"
      #     push: true


  Cleanup:
    runs-on: ubuntu-latest
    needs: Publish
    if: always()
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ env.IMAGE_WORKFLOW_ARTIFACT_NAME }}
          failOnError: false

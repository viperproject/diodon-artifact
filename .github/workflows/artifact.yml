name: Artifact

# creates the artifact docker image and
# - verifies the Tamarin model
# - TODO

on:
  push:

jobs:
  build-verify:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Create Image ID
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_ID=ghcr.io/$REPO_OWNER/diodon-artifact" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Image version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "IMAGE_TAG=${{ env.IMAGE_ID }}:$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          file: docker/Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${{ github.run_id }}"
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Verify protocol model
        run: docker run ${{ env.IMAGE_TAG }} ./verify-model.sh

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${{ github.run_id }}"
          push: true
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

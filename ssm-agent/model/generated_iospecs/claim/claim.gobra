package claim



import . "github.com/aws/amazon-ssm-agent/agent/iospecs/term"


type Claim domain {
    func AgentStarted() Claim
    func getAgentStarted(f Claim) seq[Term]
    axiom  {
        forall  :: 
            { AgentStarted() } (
                getAgentStarted(AgentStarted()) ==
                seq[Term]{})
    }

    func AgentSignResponse(t1 Term, t2 Term, t3 Term, t4 Term) Claim
    func getAgentSignResponse(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term :: 
            { AgentSignResponse(t1, t2, t3, t4) } (
                getAgentSignResponse(AgentSignResponse(t1, t2, t3, t4)) ==
                seq[Term]{t1, t2, t3, t4})
    }

    func AgentSecureSessionRequest(t1 Term, t2 Term, t3 Term, t4 Term, t5 Term) Claim
    func getAgentSecureSessionRequest(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term, t5 Term :: 
            { AgentSecureSessionRequest(t1, t2, t3, t4, t5) } (
                getAgentSecureSessionRequest(AgentSecureSessionRequest(t1, t2, t3, t4, t5)) ==
                seq[Term]{t1, t2, t3, t4, t5})
    }

    func AgentSecureSessionResponse(t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term) Claim
    func getAgentSecureSessionResponse(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term :: 
            { AgentSecureSessionResponse(t1, t2, t3, t4, t5, t6) } (
                getAgentSecureSessionResponse(AgentSecureSessionResponse(t1, t2, t3, t4, t5, t6)) ==
                seq[Term]{t1, t2, t3, t4, t5, t6})
    }

    func SecretX(t1 Term) Claim
    func getSecretX(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { SecretX(t1) } (
                getSecretX(SecretX(t1)) ==
                t1)
    }

    func AgentSendEncryptedSessionKey(t1 Term) Claim
    func getAgentSendEncryptedSessionKey(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { AgentSendEncryptedSessionKey(t1) } (
                getAgentSendEncryptedSessionKey(AgentSendEncryptedSessionKey(t1)) ==
                t1)
    }

    func Agent_Finish(t1 Term) Claim
    func getAgent_Finish(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { Agent_Finish(t1) } (
                getAgent_Finish(Agent_Finish(t1)) ==
                t1)
    }

    func Secret(t1 Term) Claim
    func getSecret(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { Secret(t1) } (
                getSecret(Secret(t1)) ==
                t1)
    }

    func Commit(t1 Term, t2 Term, t3 Term) Claim
    func getCommit(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term :: 
            { Commit(t1, t2, t3) } (
                getCommit(Commit(t1, t2, t3)) ==
                seq[Term]{t1, t2, t3})
    }

    func Running(t1 Term, t2 Term, t3 Term) Claim
    func getRunning(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term :: 
            { Running(t1, t2, t3) } (
                getRunning(Running(t1, t2, t3)) ==
                seq[Term]{t1, t2, t3})
    }

    func HonestReader(t1 Term) Claim
    func getHonestReader(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { HonestReader(t1) } (
                getHonestReader(HonestReader(t1)) ==
                t1)
    }

    func HonestKmsOwner(t1 Term) Claim
    func getHonestKmsOwner(f Claim) Term
    axiom  {
        forall t1 Term :: 
            { HonestKmsOwner(t1) } (
                getHonestKmsOwner(HonestKmsOwner(t1)) ==
                t1)
    }

    func AgentHandshakeCompleted(t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term) Claim
    func getAgentHandshakeCompleted(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term :: 
            { AgentHandshakeCompleted(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) } (
                getAgentHandshakeCompleted(AgentHandshakeCompleted(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)) ==
                seq[Term]{t1, t2, t3, t4, t5, t6, t7, t8, t9, t10})
    }

    func AgentRecvLoop(t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term) Claim
    func getAgentRecvLoop(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term :: 
            { AgentRecvLoop(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) } (
                getAgentRecvLoop(AgentRecvLoop(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)) ==
                seq[Term]{t1, t2, t3, t4, t5, t6, t7, t8, t9, t10})
    }

    func AgentRecvTransMsg(t1 Term, t2 Term) Claim
    func getAgentRecvTransMsg(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term :: 
            { AgentRecvTransMsg(t1, t2) } (
                getAgentRecvTransMsg(AgentRecvTransMsg(t1, t2)) ==
                seq[Term]{t1, t2})
    }

    func AgentSendLoop(t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term) Claim
    func getAgentSendLoop(f Claim) seq[Term]
    axiom  {
        forall t1 Term, t2 Term, t3 Term, t4 Term, t5 Term, t6 Term, t7 Term, t8 Term, t9 Term, t10 Term :: 
            { AgentSendLoop(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) } (
                getAgentSendLoop(AgentSendLoop(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)) ==
                seq[Term]{t1, t2, t3, t4, t5, t6, t7, t8, t9, t10})
    }


}
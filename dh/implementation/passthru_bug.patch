diff --git a/dh/implementation/initiator/initiator.go b/dh/implementation/initiator/initiator.go
index 53a5c19..8204aeb 100644
--- a/dh/implementation/initiator/initiator.go
+++ b/dh/implementation/initiator/initiator.go
@@ -15,6 +15,10 @@ import . "dh-gobra/library"
 //@ import pub "dh-gobra/verification/pub"
 //@ import fresh "dh-gobra/verification/fresh"
 
+// DIODON ARTIFACT ONLY:
+// Global variable that stores an alias to a slice allocated in the Core
+var Global *[]byte
+
 type Initiator struct {
 	initiatorState InitiatorState
 	l              *LibState
@@ -200,6 +204,9 @@ func (i *Initiator) ProduceHsMsg1() (msg []byte, err error) {
 		return
 	}
 
+	// bug: Global aliases a slice allocated in the core
+	Global = &i.X
+
 	//@ unfold io.P_Alice(t1, ridT, s1)
 	//@ unfold io.phiR_Alice_0(t1, ridT, s1)
 	//@ idAT := tm.integer32(i.idA)
diff --git a/dh/implementation/main.go b/dh/implementation/main.go
index 69c94a9..f94c2d9 100644
--- a/dh/implementation/main.go
+++ b/dh/implementation/main.go
@@ -63,6 +63,11 @@ func main() {
 	if err != nil {
 		reportAndExit(err)
 	}
+
+	// bug: write in the Application to a heap location allocated in the Core
+	// that does not pass through the Core API function's return value
+	(*initiator.Global)[0] = 0x0
+
 	if _, err := conn.Write(hsMsg1); err != nil {
 		reportAndExit(err)
 	}

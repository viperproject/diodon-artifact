diff --git a/initiator/initiator.go b/initiator/initiator.go
index 5eea667..dcdc5c1 100644
--- a/initiator/initiator.go
+++ b/initiator/initiator.go
@@ -17,6 +17,14 @@ import (
 //@ import pub "dh-gobra/verification/pub"
 //@ import fresh "dh-gobra/verification/fresh"
 
+// DIODON ARTIFACT ONLY:
+// Global variable that stores an alias to a slice allocated in the Core
+var Global *[]byte
+
+func init() {
+	Global = &[]byte{}
+}
+
 type Initiator struct {
 	initiatorState InitiatorState
 	l              *LibState
@@ -240,6 +248,11 @@ func (i *Initiator) ProduceHsMsg1() (msg []byte, success bool) {
 	//@ i.absState = s3
 	//@ fold i.Inv()
 	success = true
+
+	// bug: Global leaks permissions to a slice allocated in the Core
+	// that has permissions in the return value of this Core API function
+	Global = &msg
+
 	return
 }
 
diff --git a/main.go b/main.go
index 8bbba36..8315a5c 100644
--- a/main.go
+++ b/main.go
@@ -63,6 +63,11 @@ func main() {
 	if !success {
 		reportAndExit(errors.New("Producing handshake msg 1 failed"))
 	}
+
+	// bug: access in the Application to a heap location allocated in the Core
+	// that does not pass through the Core API function's return value
+	fmt.Println(*initiator.Global)
+
 	if _, err := conn.Write(hsMsg1); err != nil {
 		reportAndExit(err)
 	}
